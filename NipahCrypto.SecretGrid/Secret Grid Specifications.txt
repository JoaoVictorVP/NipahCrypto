Nipah Crypto - Secret Grid Algorithm

STANDARTS:

 Size (in bytes / bits / kb's):
	For secure signatures:
		Signature Key Size: 96 | 768-bits / 0,09375 kb
		Master Private Key Size: 32 | 256-bits / 0,03125 kb
		Public Key Size: (variable around 1-3 bytes) 97358 | 778864-bits / 95,076171875 kb
		
		Resulting Signature Size: (variable around 1-3 bytes): 97462 | 779696-bits / 95,177734375 kb
		
		
 Values:
	Prime Used (for uniqueness): 999999000001
	PrimeX3 Used (^3): 999997000005999993000005999997000001
	MinMaxKeys Used: 1024 (high is good but results in significantly larger public keys and signatures)
	
The idea of this scheme is simple:
	For Initializing:
		Get a random master private key of size @Master_Private_Key_Size, then use it to feed seed for NPRNG (use it from now)
		Generate a set of @MinMaxKeys signing keys, of size @Signature_Key_Size (the current method is to generate 3-axis [X, Y, Z] then multiply all of then at the signing process)
		Obtain the public key by multiplying all of the signature keys in the set
	
	For Signing:
		Pick a trully random (not NPRNG) key from the set of signing keys, that will be called $SK
		Pick two masks for X and Y axis of $SK, they will be big integers (bint) of a random size between <@Prime...@PrimeX3>
			Just for safety, if $MaskX or $MaskY where 0, then change them to 3 in order to prevent errors (or rerroll, what is better for your code security)
		Obtain the $Factor by multiplying $MaskX and $MaskY together
		
		Now, in order to get a thing we will call $TamperProof:
			Multiply all keys of signing key set except $SK
			
		To obtain a digested data $NData:
			Hash your data into a SHA512 (to maximize entropy)
			Hash it again against SHA256 (to minimize size)
		
		Then sign:
			Multiply your $SK[X] with $MaskX and $SK[Z] with $MaskZ, then the result with $NData
		
		Pack it all (including the SK[Y]) into a byte buffer and send as signature
	
	For signature proofs:
		Extract all variables from the received buffer, name them Public Key $PK, Tamper Proof $TP, Signature $S, Factor $F and the missing Y-axis variable $Y
		
		Obtain $NData digesting data like in signature method (to guarantee data integrity)
		
		Then, obtain a reduced component $rc of $PK by dividing it by $TP, this should give us a value that abstract the components of public key, but, because of masking, only patterns of missing y should be visible (and yet, not so much).
		
		Now obtain the reduced component $vrc of $PK again, but now by dividing $S by $F, then by $NData (abstracting signature, factor and then data from calculus), nextly multiply this resulting value by the missing y axis value $Y, this should result you a value equal to $rc if none of components was forged (neither tamper proof, nor the data itself, nor the signature value [by itself abstracts various other values], nor the factor [that should hide the individual factors of other axis, hence, hidding their values to an attacker], nor the original Y-axis value used in signature [this is trully the original value, but by itself an attacker can't do nothing with it without knowing other components first])
		
		To finally verify, just compare $rc with $vrc, if both are equal then the signature was trully made by the public key owner.
		
Why it is not vulnerable to attackers?
	In order to forge a false signature, an attacker should, at least, know in advance the subsequent values: abstracted XY*Factor, and, principally, all of non-SK signature keys (or, at least, all of their XY*Factors).
	Without knowing any of the non-SK keys, an attacker can only try to get XY*Factor thus trying to forge signature for the same tamper proof and different data (abstracting data) and the same y, there's no known attacks of this type.